//Since this is run outside Next.js, it is best to
//skip the fancy ES6+ stuff. Let's be conservative.
//Also, sorry about this. It took me several iterations
//to get an elegant way of creating reducers over bash.
//while making everything backwards-compatible.
//This is incompatible with plugins-reducer.js, and would break things if combined with the latter.


/** This has been built with the following reducer philosophies:

* reducers should maintain state in the file system, and not in memory. This would allow the reducer to ingest large chunks of data
* reducers should survive and thrive in a loop, regardlesss of the number of iterations.
* reducers should gracefully handle the "base case" (e.g. the "database" file does not yet exist)
* reducers should get their accumulator data as input streams
* reducers should emit their output as output streams
* each step of a reducer output should be properly formatted (eg JSON, YAML, XML, etc.)

**/

const mode = process.argv[2];
const classPath = process.argv[3];


let buffer = '';

process.stdin.on('data', data => {
  buffer += data;
});

process.stdin.on('end', () => {

  const json = JSON.parse(buffer);
  let newJson;
  switch(mode) {
    case 'plugin-exports-reduce':
      newJson = {
          data: [
              ...json.data,
              classPath
          ]
      }
      process.stdout.write(JSON.stringify(newJson));
      break;

    case 'plugin-exports-build':
      const classpaths = json.data.map(classpath => {
        const classpathArray = classpath.split('/');
        const properPath = classpathArray.slice(1, classpathArray.length - 1);   //remove plugins prefix
        const nameWithExtension = classpathArray[classpathArray.length - 1];
        const name = nameWithExtension.split(".")[0]
        return {
          classpath: [...properPath, name].join("/"),
          name: name
        }
      });
      const template = `
//This is an autogenerated file. DO NOT MODIFY, your changes will be overwritten.
${classpaths.map(klass => (`import ${klass.name} from  '@/plugins/${klass.classpath}';`)).join("\n")}
      
export const pluginMapping = {
${classpaths.map(klass => (
  `\t"${klass.classpath}":${klass.name}`)).join(",\n")}
};
      `;
      process.stdout.write(template);
      break;
  }

});